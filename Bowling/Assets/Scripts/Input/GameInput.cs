//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Scripts/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""54a7d14b-bafe-407d-8a4f-07ae6d5c5adc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8802ff30-28bb-4b9a-b0e9-709bb24bd8f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""095f433a-67f0-48fb-b8d6-fc224d51e29d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d836993-91ba-403c-be83-501b67019ee8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee43590c-0a78-4e54-8a48-d97cc771cdd1"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""95ad4e4f-6c19-4eed-b012-036c47906bf6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8005e55d-6f2d-4aee-98ec-56b79ef2b65d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e394b91f-f3f1-475a-ad46-4141096954fe"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fa6974de-6da3-4f1d-bc99-26890c32e2ce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7f0de6a4-979f-4651-a669-039fb52576a9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b0a57607-2337-462c-a14a-1439a55fccf2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a2b297c-70f0-4ee0-9525-8b34622dfbe4"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dicide"",
            ""id"": ""012447f8-60c1-4f1f-b35d-639ee73924b1"",
            ""actions"": [
                {
                    ""name"": ""KeyBoardDicide"",
                    ""type"": ""Button"",
                    ""id"": ""133511f2-4d6f-4288-bdd5-44cad06c2172"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PadDicide"",
                    ""type"": ""Button"",
                    ""id"": ""2669c45e-bf63-4923-b695-24193ce31581"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""5642c614-6e68-4ebb-96b1-8f4f54e6ad76"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5669530-15c0-45d8-b17f-7cf374b635d0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBoardDicide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf08d461-2e1e-43ed-9dfd-667a87fb1638"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PadDicide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e82fdda-127a-4514-8e0f-962d02221f0a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cancel"",
            ""id"": ""049c9d41-837b-432c-8f6d-2cb2da469d2f"",
            ""actions"": [
                {
                    ""name"": ""KeyBoradCancel"",
                    ""type"": ""Button"",
                    ""id"": ""0a2505cc-aa81-44a8-8c18-ec4b028d3417"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PadCancel"",
                    ""type"": ""Button"",
                    ""id"": ""080e17bc-f334-4f87-81ae-27db743d34ae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""48f334ef-a2ed-4e59-a427-d1e5a363037b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBoradCancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39ddabbb-2fe9-49b1-a073-afe0a476b5de"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PadCancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Option"",
            ""id"": ""54cb9d6c-33ce-4766-933f-fb7a889f7b83"",
            ""actions"": [
                {
                    ""name"": ""KeyBoard"",
                    ""type"": ""Button"",
                    ""id"": ""da11d255-5241-4f18-aaa3-caf7e14666c7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pad"",
                    ""type"": ""Button"",
                    ""id"": ""9dc1828f-9508-4038-857a-2665fa53e164"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d3f71794-8a1e-45e9-9043-661ce1bae79e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyBoard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecc24ecf-cf5f-4c3e-8ae2-0c75426aad31"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftRight"",
            ""id"": ""863f1f08-8c23-4742-8202-ace42df2eaeb"",
            ""actions"": [
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""98c14942-e383-4b76-8619-350a7acd5f0d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""9b04a221-6775-4848-a08f-8292d8ed8263"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cff0705a-51f0-4411-885f-fafb41074dfb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c030e12-8ed3-4ca4-b449-b8a2c589dd6a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db4134f5-48af-4703-a387-3a749cfc7c33"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25c4c32e-a5c4-4b97-bfa9-df5d1ab3cebf"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be5ea066-70e2-45f6-91c1-ff9eff5e0096"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06a718ca-4a35-46b2-9c47-8547a82e96de"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""071f667a-41a3-47f5-92cd-5e4c7e5244b3"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8ebec60-061f-496c-b0f2-3301f0bfe3fe"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        // Dicide
        m_Dicide = asset.FindActionMap("Dicide", throwIfNotFound: true);
        m_Dicide_KeyBoardDicide = m_Dicide.FindAction("KeyBoardDicide", throwIfNotFound: true);
        m_Dicide_PadDicide = m_Dicide.FindAction("PadDicide", throwIfNotFound: true);
        m_Dicide_MouseLeftClick = m_Dicide.FindAction("MouseLeftClick", throwIfNotFound: true);
        // Cancel
        m_Cancel = asset.FindActionMap("Cancel", throwIfNotFound: true);
        m_Cancel_KeyBoradCancel = m_Cancel.FindAction("KeyBoradCancel", throwIfNotFound: true);
        m_Cancel_PadCancel = m_Cancel.FindAction("PadCancel", throwIfNotFound: true);
        // Option
        m_Option = asset.FindActionMap("Option", throwIfNotFound: true);
        m_Option_KeyBoard = m_Option.FindAction("KeyBoard", throwIfNotFound: true);
        m_Option_Pad = m_Option.FindAction("Pad", throwIfNotFound: true);
        // LeftRight
        m_LeftRight = asset.FindActionMap("LeftRight", throwIfNotFound: true);
        m_LeftRight_Right = m_LeftRight.FindAction("Right", throwIfNotFound: true);
        m_LeftRight_Left = m_LeftRight.FindAction("Left", throwIfNotFound: true);
    }

    ~@GameInput()
    {
        Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, GameInput.Player.Disable() has not been called.");
        Debug.Assert(!m_Dicide.enabled, "This will cause a leak and performance issues, GameInput.Dicide.Disable() has not been called.");
        Debug.Assert(!m_Cancel.enabled, "This will cause a leak and performance issues, GameInput.Cancel.Disable() has not been called.");
        Debug.Assert(!m_Option.enabled, "This will cause a leak and performance issues, GameInput.Option.Disable() has not been called.");
        Debug.Assert(!m_LeftRight.enabled, "This will cause a leak and performance issues, GameInput.LeftRight.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    public struct PlayerActions
    {
        private @GameInput m_Wrapper;
        public PlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Dicide
    private readonly InputActionMap m_Dicide;
    private List<IDicideActions> m_DicideActionsCallbackInterfaces = new List<IDicideActions>();
    private readonly InputAction m_Dicide_KeyBoardDicide;
    private readonly InputAction m_Dicide_PadDicide;
    private readonly InputAction m_Dicide_MouseLeftClick;
    public struct DicideActions
    {
        private @GameInput m_Wrapper;
        public DicideActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyBoardDicide => m_Wrapper.m_Dicide_KeyBoardDicide;
        public InputAction @PadDicide => m_Wrapper.m_Dicide_PadDicide;
        public InputAction @MouseLeftClick => m_Wrapper.m_Dicide_MouseLeftClick;
        public InputActionMap Get() { return m_Wrapper.m_Dicide; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DicideActions set) { return set.Get(); }
        public void AddCallbacks(IDicideActions instance)
        {
            if (instance == null || m_Wrapper.m_DicideActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DicideActionsCallbackInterfaces.Add(instance);
            @KeyBoardDicide.started += instance.OnKeyBoardDicide;
            @KeyBoardDicide.performed += instance.OnKeyBoardDicide;
            @KeyBoardDicide.canceled += instance.OnKeyBoardDicide;
            @PadDicide.started += instance.OnPadDicide;
            @PadDicide.performed += instance.OnPadDicide;
            @PadDicide.canceled += instance.OnPadDicide;
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
        }

        private void UnregisterCallbacks(IDicideActions instance)
        {
            @KeyBoardDicide.started -= instance.OnKeyBoardDicide;
            @KeyBoardDicide.performed -= instance.OnKeyBoardDicide;
            @KeyBoardDicide.canceled -= instance.OnKeyBoardDicide;
            @PadDicide.started -= instance.OnPadDicide;
            @PadDicide.performed -= instance.OnPadDicide;
            @PadDicide.canceled -= instance.OnPadDicide;
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
        }

        public void RemoveCallbacks(IDicideActions instance)
        {
            if (m_Wrapper.m_DicideActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDicideActions instance)
        {
            foreach (var item in m_Wrapper.m_DicideActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DicideActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DicideActions @Dicide => new DicideActions(this);

    // Cancel
    private readonly InputActionMap m_Cancel;
    private List<ICancelActions> m_CancelActionsCallbackInterfaces = new List<ICancelActions>();
    private readonly InputAction m_Cancel_KeyBoradCancel;
    private readonly InputAction m_Cancel_PadCancel;
    public struct CancelActions
    {
        private @GameInput m_Wrapper;
        public CancelActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyBoradCancel => m_Wrapper.m_Cancel_KeyBoradCancel;
        public InputAction @PadCancel => m_Wrapper.m_Cancel_PadCancel;
        public InputActionMap Get() { return m_Wrapper.m_Cancel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CancelActions set) { return set.Get(); }
        public void AddCallbacks(ICancelActions instance)
        {
            if (instance == null || m_Wrapper.m_CancelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CancelActionsCallbackInterfaces.Add(instance);
            @KeyBoradCancel.started += instance.OnKeyBoradCancel;
            @KeyBoradCancel.performed += instance.OnKeyBoradCancel;
            @KeyBoradCancel.canceled += instance.OnKeyBoradCancel;
            @PadCancel.started += instance.OnPadCancel;
            @PadCancel.performed += instance.OnPadCancel;
            @PadCancel.canceled += instance.OnPadCancel;
        }

        private void UnregisterCallbacks(ICancelActions instance)
        {
            @KeyBoradCancel.started -= instance.OnKeyBoradCancel;
            @KeyBoradCancel.performed -= instance.OnKeyBoradCancel;
            @KeyBoradCancel.canceled -= instance.OnKeyBoradCancel;
            @PadCancel.started -= instance.OnPadCancel;
            @PadCancel.performed -= instance.OnPadCancel;
            @PadCancel.canceled -= instance.OnPadCancel;
        }

        public void RemoveCallbacks(ICancelActions instance)
        {
            if (m_Wrapper.m_CancelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICancelActions instance)
        {
            foreach (var item in m_Wrapper.m_CancelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CancelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CancelActions @Cancel => new CancelActions(this);

    // Option
    private readonly InputActionMap m_Option;
    private List<IOptionActions> m_OptionActionsCallbackInterfaces = new List<IOptionActions>();
    private readonly InputAction m_Option_KeyBoard;
    private readonly InputAction m_Option_Pad;
    public struct OptionActions
    {
        private @GameInput m_Wrapper;
        public OptionActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyBoard => m_Wrapper.m_Option_KeyBoard;
        public InputAction @Pad => m_Wrapper.m_Option_Pad;
        public InputActionMap Get() { return m_Wrapper.m_Option; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OptionActions set) { return set.Get(); }
        public void AddCallbacks(IOptionActions instance)
        {
            if (instance == null || m_Wrapper.m_OptionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OptionActionsCallbackInterfaces.Add(instance);
            @KeyBoard.started += instance.OnKeyBoard;
            @KeyBoard.performed += instance.OnKeyBoard;
            @KeyBoard.canceled += instance.OnKeyBoard;
            @Pad.started += instance.OnPad;
            @Pad.performed += instance.OnPad;
            @Pad.canceled += instance.OnPad;
        }

        private void UnregisterCallbacks(IOptionActions instance)
        {
            @KeyBoard.started -= instance.OnKeyBoard;
            @KeyBoard.performed -= instance.OnKeyBoard;
            @KeyBoard.canceled -= instance.OnKeyBoard;
            @Pad.started -= instance.OnPad;
            @Pad.performed -= instance.OnPad;
            @Pad.canceled -= instance.OnPad;
        }

        public void RemoveCallbacks(IOptionActions instance)
        {
            if (m_Wrapper.m_OptionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOptionActions instance)
        {
            foreach (var item in m_Wrapper.m_OptionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OptionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OptionActions @Option => new OptionActions(this);

    // LeftRight
    private readonly InputActionMap m_LeftRight;
    private List<ILeftRightActions> m_LeftRightActionsCallbackInterfaces = new List<ILeftRightActions>();
    private readonly InputAction m_LeftRight_Right;
    private readonly InputAction m_LeftRight_Left;
    public struct LeftRightActions
    {
        private @GameInput m_Wrapper;
        public LeftRightActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Right => m_Wrapper.m_LeftRight_Right;
        public InputAction @Left => m_Wrapper.m_LeftRight_Left;
        public InputActionMap Get() { return m_Wrapper.m_LeftRight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftRightActions set) { return set.Get(); }
        public void AddCallbacks(ILeftRightActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftRightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftRightActionsCallbackInterfaces.Add(instance);
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
        }

        private void UnregisterCallbacks(ILeftRightActions instance)
        {
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
        }

        public void RemoveCallbacks(ILeftRightActions instance)
        {
            if (m_Wrapper.m_LeftRightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftRightActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftRightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftRightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftRightActions @LeftRight => new LeftRightActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IDicideActions
    {
        void OnKeyBoardDicide(InputAction.CallbackContext context);
        void OnPadDicide(InputAction.CallbackContext context);
        void OnMouseLeftClick(InputAction.CallbackContext context);
    }
    public interface ICancelActions
    {
        void OnKeyBoradCancel(InputAction.CallbackContext context);
        void OnPadCancel(InputAction.CallbackContext context);
    }
    public interface IOptionActions
    {
        void OnKeyBoard(InputAction.CallbackContext context);
        void OnPad(InputAction.CallbackContext context);
    }
    public interface ILeftRightActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
    }
}
